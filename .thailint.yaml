# Purpose: Thailint configuration for multi-language code quality enforcement
# Scope: Python, TypeScript, and JavaScript linting across the entire project
# Overview: Configures thailint to detect magic numbers, excessive nesting, SRP violations,
#     file placement issues, and duplicate code. Settings align with project standards
#     for code quality enforcement. Includes comprehensive ignore patterns for test files,
#     configuration files, and special cases where violations are acceptable.
# Dependencies: thailint package, .ai/layout.yaml for file placement rules
# Exports: Configuration for magic-numbers, nesting, srp, file-placement, and dry linters
# Interfaces: Used by thailint CLI and pre-commit hooks
# Implementation: YAML configuration with per-linter settings and ignore patterns

# Magic Numbers Linter
# Detects numeric literals that should be named constants
magic-numbers:
  enabled: true
  # Allow common numbers that are self-documenting
  allowed_numbers: [-1, 0, 1, 2, 10, 100, 1000, 1024]
  # Small integers in loops/ranges are acceptable
  max_small_integer: 10
  # Ignore patterns
  ignore:
    - "test/**"
    - "**/test_*.py"
    - "**/*_test.py"
    - "**/*constants.py"
    - "**/*_constants.py"
    - "**/config*.py"
    - "**/settings*.py"

# Nesting Depth Linter
# Prevents excessive code nesting for better readability
nesting:
  enabled: true
  # Maximum nesting depth
  max_nesting_depth: 4
  # Ignore patterns
  ignore:
    - "test/**"
    - "**/test_*.py"
    - "**/*_test.py"

# Single Responsibility Principle Linter
# Detects classes with multiple responsibilities
srp:
  enabled: true
  # Maximum methods per class
  max_methods: 15
  # Maximum lines of code per class
  max_loc: 200
  # Check for responsibility keywords in class names
  check_keywords: true
  keywords:
    - Manager
    - Handler
    - Processor
    - Controller
    - Orchestrator
    - Coordinator
  # Ignore patterns
  ignore:
    - "test/**"
    - "**/test_*.py"
    - "**/*_test.py"
    # Framework pattern classes are expected to have multiple methods
    - "**/*Rule.py"
    - "**/*Reporter.py"
    - "**/*Analyzer.py"
    - "**/*Registry.py"
    - "**/*Interface.py"

# File Placement Linter
# Enforces project structure and file organization
file-placement:
  enabled: true
  # Reference layout configuration
  layout_file: ".ai/layout.yaml"
  # Ignore patterns
  ignore:
    - ".git/**"
    - "**/__pycache__/**"
    - "**/.pytest_cache/**"
    - "**/.mypy_cache/**"
    - "**/.ruff_cache/**"
    - "**/node_modules/**"
    - "**/dist/**"
    - "**/build/**"
    - "**/.venv/**"
    - "**/venv/**"

# DRY (Don't Repeat Yourself) Linter
# Detects duplicate code blocks
dry:
  enabled: true
  # Minimum lines for duplicate detection
  min_duplicate_lines: 4
  # Minimum occurrences before reporting
  min_occurrences: 2
  # Minimum tokens for duplicate detection
  min_duplicate_tokens: 30
  # Ignore patterns
  ignore:
    - "test/**"
    - "**/test_*.py"
    - "**/*_test.py"
    - "**/__init__.py"
    - "**/migrations/**"
    - "**/*_pb2.py"  # Generated protobuf files

# Global Settings
global:
  # Fail on any violation (strict mode)
  fail_on_error: true
  # Output format (text, json, or sarif)
  output_format: text
  # Show violation context
  show_context: true
  # Number of context lines to show
  context_lines: 2
