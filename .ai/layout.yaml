# Purpose: Define comprehensive file placement rules and directory organization standards for the project
# Scope: All project files, AI agent guidance, and automated linting tool validation
# Overview: Establishes authoritative rules for where different types of files should be placed
#     throughout the project structure. Provides both human-readable guidance for AI agents and
#     machine-readable validation rules for automated enforcement. Includes decision trees for
#     component placement, common mistakes to avoid, and linter configuration patterns. Essential
#     for maintaining consistent project organization and enabling automated file placement validation.
# Dependencies: Design linting framework, AI agent workflow tools, pre-commit hooks
# Exports: File placement rules, validation patterns, directory organization standards
# Environment: All development environments, integrated with linting and AI agent tools
# Related: FILE_HEADER_STANDARDS.md, STANDARDS.md, design linting framework
# Implementation: YAML structure with regex patterns for automated validation and human guidance

version: "3.0"
_meta:
  description: "Project layout rules for both AI agents and linting tools"
  schema_version: "3.0"
  last_updated: "2025-09-21"

ai_guidance:
  description: "Human-readable guidance for AI agents on file placement decisions"
  principles:
    separation_of_concerns: "Keep different types of code in designated areas"
    test_isolation: "All test files must be in test/ directory, never in source"
    feature_vs_component: "Complex features go in features/, simple UI in components/"
    script_organization: "Frontend scripts in frontend/scripts, backend in backend/scripts, project-wide in scripts/"

  decision_trees:
    react_component_placement:
      question: "Where should this React component go?"
      criteria:
        has_websocket: "→ features/[feature-name]/"
        has_complex_state: "→ features/[feature-name]/"
        makes_api_calls: "→ features/[feature-name]/"
        is_simple_ui: "→ components/common/"
        is_tab_without_logic: "→ components/tabs/"

    python_module_placement:
      question: "Where should this Python module go?"
      criteria:
        is_api_endpoint: "→ backend/app/api/"
        is_business_logic: "→ backend/app/services/"
        is_data_model: "→ backend/app/models/"
        is_core_utility: "→ backend/app/core/"
        is_linting_rule: "→ tools/design_linters/rules/[category]/"

    test_placement:
      question: "Where should this test file go?"
      criteria:
        unit_test: "→ test/unit_test/ (mirror source structure)"
        integration_test: "→ test/integration_test/"
        performance_test: "→ test/performance_test/"

    infrastructure_placement:
      question: "Where should this infrastructure file go?"
      criteria:
        base_infrastructure: "→ infra/terraform/workspaces/base/"
        runtime_infrastructure: "→ infra/terraform/workspaces/runtime/"
        backend_configuration: "→ infra/terraform/backend-config/"
        shared_module: "→ infra/terraform/modules/"
        shared_variables: "→ infra/terraform/shared/"
        legacy_terraform: "→ infra/terraform/ (being migrated to workspaces)"
        environment_config: "→ infra/environments/"
        deployment_script: "→ infra/scripts/"
        terraform_state: "→ workspace/.terraform/ (auto-managed per workspace)"
        aws_credentials: "→ Never commit! Use environment variables"

    docker_file_placement:
      question: "Where should this Docker file go?"
      criteria:
        backend_dockerfile_dev: "→ .docker/dockerfiles/backend/Dockerfile.dev"
        backend_dockerfile_prod: "→ .docker/dockerfiles/backend/Dockerfile.prod"
        frontend_dockerfile_dev: "→ .docker/dockerfiles/frontend/Dockerfile.dev"
        frontend_dockerfile_prod: "→ .docker/dockerfiles/frontend/Dockerfile.prod"
        linting_dockerfile: "→ .docker/dockerfiles/linting/Dockerfile.[language]-lint"
        testing_dockerfile: "→ .docker/dockerfiles/testing/Dockerfile.[framework]"
        deployment_dockerfile: "→ .docker/dockerfiles/deployment/Dockerfile.[purpose]"
        compose_dev: "→ .docker/compose/dev.yml"
        compose_prod: "→ .docker/compose/prod.yml"
        compose_lint: "→ .docker/compose/lint.yml"
        compose_test: "→ .docker/compose/test.yml"

  common_mistakes:
    test_in_source: "Never put test files in source directories"
    debug_in_root: "Don't leave debug files in project root"
    complex_in_components: "Don't put complex features in components/"
    scripts_scattered: "Don't scatter scripts - organize by scope"
    tools_root_files: "Don't place Python files in tools root - use subdirectories"
    terraform_in_wrong_dir: "Don't put .tf files outside infra/terraform/"
    mixing_workspaces: "Don't mix base and runtime resources in same workspace"
    wrong_workspace_resources: "Don't put ECS in base or VPC in runtime workspace"
    backend_config_in_code: "Don't hardcode backend config - use backend-config files"
    env_vars_in_terraform: "Don't hardcode environment-specific values in .tf files - use .tfvars"
    credentials_in_code: "Never commit AWS credentials or secrets - use environment variables"
    state_files_committed: "Don't commit terraform.tfstate files - use remote backend"
    docker_files_scattered: "Don't scatter Docker files - use .docker/ directory structure"
    compose_in_root: "Don't leave docker-compose files in root - use .docker/compose/"

linter_rules:
  description: "Machine-readable rules for file placement validation"
  paths:
    .ai/:
      allow:
        - '^\\.ai/[^/]+\\.json$'
        - '^\\.ai/[^/]+\\.yaml$'
        - '^\\.ai/[^/]+\\.md$'
        - '^\\.ai/docs/[^/]+\\.md$'
        - '^\\.ai/features/[^/]+\\.md$'
        - '^\\.ai/howto/[^/]+\\.md$'
        - '^\\.ai/templates/[^/]+\\.template$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'
        - '\\.jsx$'
        - 'test'

    .claude/commands/:
      allow:
        - '^\\.claude/commands/[^/]+\\.md$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'

    durable-code-app/frontend/src/app/:
      allow:
        - '/app/App\\.tsx$'
        - '/app/main\\.tsx$'
        - '/app/[^/]+\\.ts$'
        - '/app/[^/]+\\.tsx$'
      deny:
        - '[Ff]eature'
        - '[Ss]ervice'
        - '[Aa]pi'
        - '[Ww]ebsocket'
        - '\\.test\\.'
        - '\\.spec\\.'

    durable-code-app/frontend/src/assets/:
      allow:
        - '\\.svg$'
        - '\\.png$'
        - '\\.jpg$'
        - '\\.jpeg$'
        - '\\.gif$'
        - '\\.woff2?$'
        - '\\.ttf$'
        - '\\.css$'
      deny:
        - '\\.ts$'
        - '\\.tsx$'
        - '\\.js$'
        - '\\.jsx$'

    durable-code-app/frontend/src/components/:
      allow:
        - '/components/[^/]+/[^/]+\\.tsx$'
        - '/components/[^/]+/[^/]+\\.ts$'
        - '/components/[^/]+/[^/]+\\.module\\.css$'
        - '/components/[^/]+/index\\.ts$'
      deny:
        - '[Ww]eb[Ss]ocket'
        - '[Ss]ervice\\.'
        - '[Aa]pi\\.'
        - '[Ss]tore\\.'
        - '\\.test\\.'
        - '\\.spec\\.'

    durable-code-app/frontend/src/features/:
      allow:
        - '/features/[^/]+/components/'
        - '/features/[^/]+/hooks/use'
        - '/features/[^/]+/types/'
        - '/features/[^/]+/services/'
        - '/features/[^/]+/utils/'
        - '/features/[^/]+/constants/'
        - '/features/[^/]+/store/'
        - '/features/[^/]+/index\\.ts$'
      deny:
        - '\\.test\\.'
        - '\\.spec\\.'
        - '/features/[^/]+/[^/]+\\.tsx$'

    durable-code-app/frontend/src/core/:
      allow:
        - '/core/errors/'
        - '/core/performance/'
        - '/core/auth/'
        - '/core/routing/'
      deny:
        - '\\.test\\.'
        - '\\.spec\\.'
        - '[Ff]eature'

    durable-code-app/frontend/src/hooks/:
      allow:
        - '/hooks/use[A-Z].*\\.ts$'
        - '/hooks/use[A-Z].*\\.tsx$'
      deny:
        - '/hooks/(?!use)'
        - '\\.test\\.'
        - '\\.spec\\.'

    durable-code-app/frontend/src/pages/:
      allow:
        - 'Page\\.tsx$'
        - '/pages/[^/]+/index\\.tsx$'
      deny:
        - '\\.ts$'
        - '[Cc]omponent\\.tsx$'
        - '[Ss]ervice\\.'

    durable-code-app/frontend/src/styles/:
      allow:
        - '\\.css$'
        - '\\.scss$'
      deny:
        - '\\.(ts|tsx|js|jsx)$'
        - '\\.module\\.css$'

    durable-code-app/frontend/src/utils/:
      allow:
        - '/utils/[^/]+\\.ts$'
      deny:
        - '\\.tsx$'
        - '\\.jsx$'
        - '\\.css$'
        - '[Ff]eature'
        - '\\.test\\.'
        - '\\.spec\\.'

    durable-code-app/backend/app/:
      allow:
        - '/app/main\\.py$'
        - '/app/__init__\\.py$'
        - '/app/[^/]+\\.py$'
        - '/app/api/'
        - '/app/core/'
        - '/app/models/'
        - '/app/services/'
        - '/app/db/'
        - '/app/middleware/'
        - '/app/utils/'
      deny:
        - '\\.(js|ts|tsx)$'
        - 'test_'
        - '_test\\.py$'

    durable-code-app/backend/app/core/:
      allow:
        - '/core/[^/]+\\.py$'
        - '/core/__init__\\.py$'
      deny:
        - 'test_'
        - '_test\\.py$'
        - '\\.(js|ts|tsx)$'

    durable-code-app/backend/app/services/:
      allow:
        - '_service\\.py$'
        - '/services/[^/]+\\.py$'
        - '/services/__init__\\.py$'
      deny:
        - 'test_'
        - '_test\\.py$'
        - '\\.(js|ts|tsx)$'

    tools/:
      description: "Tools root directory - Python files must be in subdirectories"
      allow:
        - '^tools/__init__\\.py$'
        - '^tools/\\.flake8$'
        - '^tools/.*\\.md$'
        - '^tools/[^/]+/.*$'
      deny:
        - '^tools/[^/]+\\.py$'

    tools/design_linters/framework/:
      allow:
        - '/framework/[^/]+\\.py$'
        - '/framework/__init__\\.py$'
      deny:
        - 'test_'
        - '_test\\.py$'
        - '\\.(js|ts|tsx)$'

    tools/design_linters/rules/:
      allow:
        - '/rules/[^/]+/[^/]+\\.py$'
        - '/rules/[^/]+/__init__\\.py$'
      deny:
        - 'test_'
        - '_test\\.py$'
        - '\\.(js|ts|tsx)$'

    test/:
      allow:
        - '/test/.*/test_[^/]+\\.py$'
        - '/test/.*\\.test\\.(ts|tsx|js)$'
        - '/test/.*\\.spec\\.(ts|tsx|js)$'
        - '/test/.*/__init__\\.py$'
        - '/test/fixtures/.*\\.json$'
      deny:
        - '/test/[^/]+\\.(py|js|ts)$'

    scripts/:
      allow:
        - '^scripts/[^/]+\\.(sh|py|js)$'
      deny:
        - '\\.(ts|tsx)$'
        - '\\.css$'
        - 'test'

    infra/:
      description: "Infrastructure as Code - Terraform and deployment scripts"
      allow:
        - '^infra/terraform/[^/]+\\.tf$'
        - '^infra/terraform/[^/]+\\.tfvars$'
        - '^infra/terraform/\\.terraform\\.lock\\.hcl$'
        - '^infra/terraform/.*\\.md$'
        - '^infra/terraform/\\.terraform/'
        - '^infra/environments/[^/]+\\.tfvars$'
        - '^infra/scripts/[^/]+\\.sh$'
        - '^infra/scripts/[^/]+\\.py$'
      deny:
        - '\\.(ts|tsx|js|jsx)$'
        - 'test_'
        - '_test\\.'
        - '\\.spec\\.'

    infra/terraform/:
      allow:
        - '/terraform/[^/]+\\.tf$'
        - '/terraform/[^/]+\\.tfvars$'
        - '/terraform/\\.terraform\\.lock\\.hcl$'
        - '/terraform/.*\\.md$'
        - '/terraform/\\.terraform/'
      deny:
        - '\\.(py|js|ts|tsx)$'
        - 'test'
        - '\\.sh$'

    infra/environments/:
      allow:
        - '/environments/[^/]+\\.tfvars$'
        - '/environments/[^/]+\\.json$'
        - '/environments/[^/]+\\.yaml$'
      deny:
        - '\\.tf$'
        - '\\.(py|js|ts|tsx|sh)$'
        - 'test'

    infra/scripts/:
      allow:
        - '/scripts/[^/]+\\.sh$'
        - '/scripts/[^/]+\\.py$'
      deny:
        - '\\.tf$'
        - '\\.(ts|tsx|js|jsx)$'
        - '\\.tfvars$'

    infra/terraform/workspaces/:
      description: "Terraform workspaces for base and runtime infrastructure separation"
      allow:
        - '/workspaces/README\\.md$'
        - '/workspaces/base/.*\\.tf$'
        - '/workspaces/base/.*\\.tfvars$'
        - '/workspaces/base/\\.terraform/'
        - '/workspaces/runtime/.*\\.tf$'
        - '/workspaces/runtime/.*\\.tfvars$'
        - '/workspaces/runtime/\\.terraform/'
        - '/workspaces/.*\\.gitkeep$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'
        - '\\.sh$'

    infra/terraform/workspaces/base/:
      description: "Base workspace for persistent infrastructure (VPC, NAT, ECR, Route53)"
      allow:
        - '/base/main\\.tf$'
        - '/base/variables\\.tf$'
        - '/base/outputs\\.tf$'
        - '/base/providers\\.tf$'
        - '/base/.*\\.tf$'
        - '/base/\\.terraform/'
        - '/base/\\.gitkeep$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.sh$'
        - 'test'

    infra/terraform/workspaces/runtime/:
      description: "Runtime workspace for ephemeral infrastructure (ECS, ALB listeners)"
      allow:
        - '/runtime/main\\.tf$'
        - '/runtime/data\\.tf$'
        - '/runtime/variables\\.tf$'
        - '/runtime/outputs\\.tf$'
        - '/runtime/providers\\.tf$'
        - '/runtime/.*\\.tf$'
        - '/runtime/\\.terraform/'
        - '/runtime/\\.gitkeep$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.sh$'
        - 'test'

    infra/terraform/backend-config/:
      description: "Backend configurations for workspace state management"
      allow:
        - '/backend-config/base-.*\\.hcl$'
        - '/backend-config/runtime-.*\\.hcl$'
      deny:
        - '\\.tf$'
        - '\\.py$'
        - '\\.js$'
        - '\\.sh$'

    infra/terraform/modules/:
      description: "Shared Terraform modules for workspaces"
      allow:
        - '/modules/[^/]+/.*\\.tf$'
        - '/modules/[^/]+/README\\.md$'
        - '/modules/\\.gitkeep$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.sh$'

    infra/terraform/shared/:
      description: "Shared configurations and variables for workspaces"
      allow:
        - '/shared/.*\\.tf$'
        - '/shared/.*\\.tfvars$'
        - '/shared/README\\.md$'
        - '/shared/\\.gitkeep$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.sh$'

    roadmap/:
      description: "Roadmap organization directory with status-based subdirectories"
      allow:
        - '^roadmap/ROADMAP\\.md$'
        - '^roadmap/planning/[^/]+/.*\\.md$'
        - '^roadmap/in_progress/[^/]+/.*\\.md$'
        - '^roadmap/complete/[^/]+/.*\\.md$'
        - '^roadmap/[^/]+/.*\\.md$'
        - '^roadmap/[^/]+/.*\\.html$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'
        - 'test'

    roadmap/planning/:
      description: "Roadmap items at 0% completion (not started)"
      allow:
        - '/planning/[^/]+/PROGRESS_TRACKER\\.md$'
        - '/planning/[^/]+/AI_CONTEXT\\.md$'
        - '/planning/[^/]+/PR_BREAKDOWN\\.md$'
        - '/planning/[^/]+/.*\\.md$'
        - '/planning/[^/]+/.*\\.html$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'

    roadmap/in_progress/:
      description: "Roadmap items between 1-99% completion (active work)"
      allow:
        - '/in_progress/[^/]+/PROGRESS_TRACKER\\.md$'
        - '/in_progress/[^/]+/AI_CONTEXT\\.md$'
        - '/in_progress/[^/]+/PR_BREAKDOWN\\.md$'
        - '/in_progress/[^/]+/.*\\.md$'
        - '/in_progress/[^/]+/.*\\.html$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'

    roadmap/complete/:
      description: "Roadmap items at 100% completion (finished)"
      allow:
        - '/complete/[^/]+/PROGRESS_TRACKER\\.md$'
        - '/complete/[^/]+/AI_CONTEXT\\.md$'
        - '/complete/[^/]+/PR_BREAKDOWN\\.md$'
        - '/complete/[^/]+/.*\\.md$'
        - '/complete/[^/]+/.*\\.html$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'

    .docker/:
      description: "Centralized Docker configuration directory"
      allow:
        - '^\\.docker/dockerfiles/backend/Dockerfile\\.(dev|prod)$'
        - '^\\.docker/dockerfiles/frontend/Dockerfile\\.(dev|prod)$'
        - '^\\.docker/dockerfiles/linting/Dockerfile\\..*-lint$'
        - '^\\.docker/dockerfiles/testing/Dockerfile\\..*$'
        - '^\\.docker/dockerfiles/deployment/Dockerfile\\..*$'
        - '^\\.docker/compose/(dev|prod|lint|test)\\.yml$'
        - '^\\.docker/.*\\.md$'
      deny:
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.tsx$'
        - '\\.sh$'

    .docker/dockerfiles/:
      allow:
        - '/dockerfiles/backend/Dockerfile\\.(dev|prod)$'
        - '/dockerfiles/frontend/Dockerfile\\.(dev|prod)$'
        - '/dockerfiles/linting/Dockerfile\\..*-lint$'
        - '/dockerfiles/testing/Dockerfile\\..*$'
        - '/dockerfiles/deployment/Dockerfile\\..*$'
      deny:
        - '\\.yml$'
        - '\\.yaml$'
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'

    .docker/compose/:
      allow:
        - '/compose/(dev|prod|lint|test)\\.yml$'
        - '/compose/.*\\.override\\.yml$'
      deny:
        - 'Dockerfile'
        - '\\.py$'
        - '\\.js$'
        - '\\.ts$'
        - '\\.sh$'

    .:
      description: "Root directory rules"
      allow:
        - '^[^/]+\\.md$'
        - '^[^/]+\\.yml$'
        - '^[^/]+\\.yaml$'
        - '^[^/]+\\.json$'
        - '^[^/]+\\.toml$'
        - '^Makefile'
        - '^Dockerfile'
        - '^\\.gitignore$'
        - '^\\.env'
        - '^requirements.*\\.txt$'
        - '^setup\\.py$'
        - '^conftest\\.py$'
      deny:
        - '^test[_-].*\\.py$'
        - '^debug[_-].*\\.py$'
        - '^tmp[_-].*\\.py$'
        - '^temp[_-].*\\.py$'
        - '_test\\.py$'
        - '_spec\\.py$'

  global_patterns:
    description: "Patterns that apply across the entire codebase"
    deny_everywhere:
      - '\\.pyc$'
      - '__pycache__'
      - '\\.pytest_cache'
      - 'node_modules/'
      - '\\.venv/'
      - '\\.env\\.local$'
      - '\\.DS_Store$'
      - 'Thumbs\\.db$'

    test_files:
      patterns:
        - 'test_.*\\.py$'
        - '.*_test\\.py$'
        - '.*\\.test\\.(js|ts|tsx)$'
        - '.*\\.spec\\.(js|ts|tsx)$'
      must_be_in:
        - '^test/'
        - '^tests/'

enforcement:
  linter_config_key: "layout_rules_file"
  usage_example:
    python: "config = {'layout_rules_file': '.ai/layout.yaml'}"
    makefile: "LAYOUT_RULES := .ai/layout.yaml"
