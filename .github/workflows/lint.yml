# Purpose: Comprehensive code quality and linting workflow using poetry and npm
# Scope: Complete linting coverage for Python, TypeScript, React, and infrastructure validation
# Overview: Executes comprehensive code quality checks using native tooling (poetry for Python,
#     npm for frontend). Runs multiple linting tools including Ruff, ESLint, MyPy, Pylint,
#     TypeScript compiler, Prettier, and infrastructure validation tools. Uses poetry and npm
#     caching for fast CI execution.
# Dependencies: Poetry, Node.js, just task runner
# Exports: Linting execution status, code quality reports, and comprehensive quality summaries
# Environment: GitHub Actions CI/CD pipeline with poetry and npm dependency caching
# Related: justfile, .pre-commit-config.yaml, pyproject.toml, package.json
# Implementation: Direct execution of linting tools via poetry run and npm run

name: Linting

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Just task runner
      - name: Install Just
        uses: extractions/setup-just@v2

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install and configure Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            durable-code-app/backend/.venv
          key: poetry-${{ runner.os }}-${{ hashFiles('durable-code-app/backend/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: durable-code-app/frontend/package-lock.json

      # Setup Terraform for infrastructure linting
      - name: Setup Terraform via tfenv
        run: |
          # Install tfenv
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          echo "$HOME/.tfenv/bin" >> $GITHUB_PATH

          # Install and use Terraform 1.9.8
          ~/.tfenv/bin/tfenv install 1.9.8
          ~/.tfenv/bin/tfenv use 1.9.8

      # Install dependencies
      - name: Install dependencies
        run: just install

      # Run linting using just task runner
      - name: Run comprehensive linting
        run: just lint

      - name: Generate linting summary
        if: always()
        run: |
          echo "## 🔍 Linting Summary" >> $GITHUB_STEP_SUMMARY
          echo "All linting checks completed using poetry and npm via \`just lint\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Linting Tools Used:" >> $GITHUB_STEP_SUMMARY
          echo "- **Python**: Ruff, Flake8, MyPy, Pylint, Bandit, Xenon (via poetry)" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ESLint, Prettier, TypeScript, Stylelint (via npm)" >> $GITHUB_STEP_SUMMARY
          echo "- **Infrastructure**: Terraform fmt, Shellcheck" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚡ Performance:" >> $GITHUB_STEP_SUMMARY
          echo "- Poetry dependency caching for fast Python environment setup" >> $GITHUB_STEP_SUMMARY
          echo "- npm caching for fast frontend dependency installation" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel execution of Python and frontend linting" >> $GITHUB_STEP_SUMMARY
