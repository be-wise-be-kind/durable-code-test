name: Morning Infrastructure Startup

on:
  schedule:
    # 9 AM PST = 5 PM UTC (during PST) / 4 PM UTC (during PDT)
    # Run Monday-Friday only to restore infrastructure for work day
    - cron: '0 16 * * 1-5'  # Monday-Friday 4 PM UTC (9 AM PDT) - Weekday startup
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to startup'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
      scope:
        description: 'Infrastructure scope to startup'
        required: true
        default: 'runtime'
        type: choice
        options:
          - runtime
          - all
      deploy_app:
        description: 'Deploy application after infrastructure startup'
        required: false
        default: true
        type: boolean
      dry_run:
        description: 'Dry run (plan only, no apply)'
        required: false
        default: false
        type: boolean

jobs:
  startup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Setup tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          echo "$HOME/.tfenv/bin" >> $GITHUB_PATH

      - name: Install Terraform
        run: |
          tfenv install 1.9.8
          tfenv use 1.9.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub-Actions-Startup-${{ github.run_id }}
          aws-region: us-west-2

      - name: Verify AWS credentials
        run: |
          echo "🔐 Verifying AWS credentials..."
          aws sts get-caller-identity
          echo "✅ AWS credentials verified"

      - name: Check infrastructure status (before)
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
        run: |
          echo "📊 Infrastructure status before startup:"
          just infra status || echo "Status check completed"

      - name: Plan infrastructure startup
        if: ${{ inputs.dry_run == true }}
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
        run: |
          echo "🔍 Planning infrastructure startup (dry run)..."
          just infra plan ${{ inputs.scope || 'runtime' }}

      - name: Execute infrastructure startup
        if: ${{ inputs.dry_run != true }}
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
        run: |
          echo "🚀 Starting infrastructure startup..."
          SCOPE="${{ inputs.scope || 'runtime' }}"

          echo "⏰ Infrastructure startup initiated at $(date)"
          # In CI, don't use AWS_PROFILE - OIDC sets environment variables directly
          just infra up "$SCOPE" true

      - name: Wait for infrastructure readiness
        if: ${{ inputs.dry_run != true }}
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
          AWS_REGION: us-west-2
        run: |
          echo "⏳ Waiting for infrastructure to be ready..."

          # Wait up to 10 minutes for infrastructure to be ready
          for i in {1..30}; do
            echo "  Attempt $i/30: Checking infrastructure readiness..."
            # Check if ALB exists and is active
            if aws elbv2 describe-load-balancers --names "durableai-${ENV}-alb" --region "$AWS_REGION" >/dev/null 2>&1; then
              echo "✅ Infrastructure is ready!"
              break
            fi

            if [[ $i -eq 30 ]]; then
              echo "⚠️ Infrastructure readiness timeout after 10 minutes"
              echo "📊 Current status:"
              just infra status || true
              exit 1
            fi

            sleep 20
          done

      - name: Deploy application
        if: ${{ inputs.deploy_app == true && inputs.dry_run != true }}
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
        run: |
          echo "🚀 Deploying application..."
          echo "📦 Starting application deployment..."
          just deploy

      - name: Verify application health
        if: ${{ inputs.deploy_app == true && inputs.dry_run != true }}
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
          AWS_REGION: us-west-2
        run: |
          echo "🏥 Verifying application health..."

          # Get ALB DNS name from AWS directly
          ALB_DNS=$(aws elbv2 describe-load-balancers --names "durableai-${ENV}-alb" --region "$AWS_REGION" --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")

          if [[ -z "$ALB_DNS" ]]; then
            echo "⚠️ Could not retrieve ALB DNS name"
            echo "📊 Skipping health check - check ECS console for deployment status"
            exit 0
          fi

          echo "📍 ALB DNS: $ALB_DNS"
          echo "🔍 Testing health endpoint: http://$ALB_DNS/health"

          # Wait up to 3 minutes for application to be healthy
          for i in {1..9}; do
            echo "  Health check attempt $i/9..."

            if curl -f --max-time 10 "http://$ALB_DNS/health" >/dev/null 2>&1; then
              echo "✅ Application is healthy!"
              exit 0
            fi

            if [[ $i -eq 9 ]]; then
              echo "⚠️ Application health check timeout after 3 minutes"
              echo "📊 This is normal for first startup - application may still be initializing"
              echo "💡 Check ECS service status for deployment progress"
            fi

            sleep 20
          done

      - name: Check infrastructure status (after)
        if: ${{ inputs.dry_run != true }}
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
        run: |
          echo "📊 Final infrastructure status:"
          just infra status || echo "Status check completed"

      - name: Post startup summary
        if: always()
        env:
          ENV: ${{ inputs.environment || 'dev' }}
          AWS_PROFILE: ""
          AWS_REGION: us-west-2
        run: |
          echo "🎯 Morning Startup Summary"
          echo "  Environment: ${{ inputs.environment || 'dev' }}"
          echo "  Scope: ${{ inputs.scope || 'runtime' }}"
          echo "  Deploy App: ${{ inputs.deploy_app || 'true' }}"
          echo "  Dry Run: ${{ inputs.dry_run || 'false' }}"
          echo "  Status: ${{ job.status }}"
          echo ""

          if [[ "${{ job.status }}" == "success" && "${{ inputs.dry_run }}" != "true" ]]; then
            ALB_DNS=$(aws elbv2 describe-load-balancers --names "durableai-${ENV}-alb" --region "$AWS_REGION" --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
            if [[ -n "$ALB_DNS" ]]; then
              echo "🌐 Application URLs:"
              echo "  - Frontend: http://$ALB_DNS"
              echo "  - Backend API: http://$ALB_DNS/api"
              echo "  - Health Check: http://$ALB_DNS/health"
            fi
          fi

          echo ""
          echo "💰 Infrastructure restored - development ready!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Morning startup failed!"
          echo "🔧 Manual intervention required"
          echo "📞 Check AWS console and Terraform state"
          echo ""
          echo "🚨 Manual recovery commands:"
          echo "  just infra up ${{ inputs.scope || 'runtime' }} true"
          if [[ "${{ inputs.deploy_app }}" == "true" ]]; then
            echo "  just deploy"
          fi